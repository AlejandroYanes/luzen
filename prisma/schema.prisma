// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Idea {
    id              String          @id @db.VarChar(255) @default(uuid())
    title           String          @db.VarChar(50)
    summary         String          @db.VarChar(695)
    description     String          @db.Text
    postedAt        DateTime        @default(now())
    votes           Int             @default(0)
    isDraft         Boolean         @default(true)
    author          User?           @relation(fields: [authorId], references: [id])
    authorId        String?
    comments        Comment[]
    usersWhoVoted   VotedIdeas[]
}

model Comment {
    id              String          @id @db.VarChar(255) @default(uuid())
    content         String          @db.VarChar(505)
    postedAt        DateTime        @default(now())
    author          User            @relation(fields: [authorId], references: [id])
    authorId        String
    idea            Idea            @relation(fields: [ideaId], references: [id])
    ideaId          String
}

model VotedIdeas {
  idea          Idea     @relation(fields: [ideaId], references: [id])
  ideaId        String
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  @@id([ideaId, userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  ideas             Idea[]
  ideasVotedFor     VotedIdeas[]
  comment           Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
